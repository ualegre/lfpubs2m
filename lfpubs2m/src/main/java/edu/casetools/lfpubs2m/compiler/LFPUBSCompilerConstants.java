/* Generated By:JavaCC: Do not edit this line. LFPUBSCompilerConstants.java */
package edu.casetools.lfpubs2m.compiler;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LFPUBSCompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHEN = 8;
  /** RegularExpression Id. */
  int NEGATION = 9;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 10;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 11;
  /** RegularExpression Id. */
  int LEFT_SQR_BRACKET = 12;
  /** RegularExpression Id. */
  int RIGHT_SQR_BRACKET = 13;
  /** RegularExpression Id. */
  int LEFT_KEY_BRACKET = 14;
  /** RegularExpression Id. */
  int RIGHT_KEY_BRACKET = 15;
  /** RegularExpression Id. */
  int POINT = 16;
  /** RegularExpression Id. */
  int POINT_COMMA = 17;
  /** RegularExpression Id. */
  int TWO_POINT = 18;
  /** RegularExpression Id. */
  int COMMA = 19;
  /** RegularExpression Id. */
  int SLASH = 20;
  /** RegularExpression Id. */
  int HYPHEN = 21;
  /** RegularExpression Id. */
  int ANDPERSAND = 22;
  /** RegularExpression Id. */
  int UNDERSCORE = 23;
  /** RegularExpression Id. */
  int DIGIT = 24;
  /** RegularExpression Id. */
  int ALPHABET = 25;
  /** RegularExpression Id. */
  int CAPSALPHABET = 26;
  /** RegularExpression Id. */
  int ARROW = 27;
  /** RegularExpression Id. */
  int EQUAL = 28;
  /** RegularExpression Id. */
  int LESS_THAN = 29;
  /** RegularExpression Id. */
  int MORE_THAN = 30;
  /** RegularExpression Id. */
  int EQ_LESS_THAN = 31;
  /** RegularExpression Id. */
  int EQ_MORE_THAN = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int START = 34;
  /** RegularExpression Id. */
  int SIMPLE = 35;
  /** RegularExpression Id. */
  int UNORDERED = 36;
  /** RegularExpression Id. */
  int END = 37;
  /** RegularExpression Id. */
  int ON = 38;
  /** RegularExpression Id. */
  int OFF = 39;
  /** RegularExpression Id. */
  int ACTION_MAP = 40;
  /** RegularExpression Id. */
  int GENERAL_CONDITIONS = 41;
  /** RegularExpression Id. */
  int ACTION_PATTERN = 42;
  /** RegularExpression Id. */
  int ON_OCCURS = 43;
  /** RegularExpression Id. */
  int FREQUENCY = 44;
  /** RegularExpression Id. */
  int PRIORITY = 45;
  /** RegularExpression Id. */
  int IF_CONTEXT = 46;
  /** RegularExpression Id. */
  int THEN = 47;
  /** RegularExpression Id. */
  int DO = 48;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int INSIDE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"when\"",
    "\"#\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\"/\"",
    "\"-\"",
    "\"&\"",
    "<UNDERSCORE>",
    "<DIGIT>",
    "<ALPHABET>",
    "<CAPSALPHABET>",
    "\"=>\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"start\"",
    "\"simple\"",
    "\"unordered\"",
    "\"end\"",
    "\"on\"",
    "\"off\"",
    "\"Action Map\"",
    "\"General Conditions\"",
    "\"(Action Pattern\"",
    "\"ON occurs\"",
    "\"Frequency:\"",
    "\"Priority:\"",
    "\"IF context\"",
    "\"THEN\"",
    "\"do\"",
    "\"OR\"",
    "\"AND\"",
    "\"time\"",
    "\"monday\"",
    "\"tuesday\"",
    "\"wednesday\"",
    "\"thursday\"",
    "\"friday\"",
    "\"saturday\"",
    "\"sunday\"",
    "\"after\"",
  };

}
