/* Generated By:JavaCC: Do not edit this line. LFPUBSCompiler.java */
package edu.casetools.lfpubs2m.compiler;
import java.io.FileReader;
import java.util.Vector;

import edu.casetools.lfpubs2m.lfpubsdata.LFPUBSPattern;
import edu.casetools.lfpubs2m.lfpubsdata.condition.IfContext;
import edu.casetools.lfpubs2m.lfpubsdata.condition.time.TimeOfDay;
import edu.casetools.lfpubs2m.lfpubsdata.action.ThenDo;
import edu.casetools.lfpubs2m.lfpubsdata.events.Occurs;
import edu.casetools.lfpubs2m.lfpubsdata.events.Sensor;


public class LFPUBSCompiler implements LFPUBSCompilerConstants {
public static void main(String[] args) {
try{
LFPUBSCompiler parser = new LFPUBSCompiler (new FileReader("C:/LFPUBS/test.txt"));
        parser.translate();

System.out.println("SYNTAX TEXT OK");
}catch (Exception ex)
{ex.printStackTrace() ;}
}

  final public void translate() throws ParseException {
        int mapId = 0;
        Vector<LFPUBSPattern> patterns = new Vector<LFPUBSPattern>();
        LFPUBSPattern auxiliarPattern = null;
    mapId = actionMapId();
    generalConditions();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACTION_PATTERN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      auxiliarPattern = pattern(mapId);
                                       patterns.add(auxiliarPattern);
    }
    jj_consume_token(0);
          for(int i=0;i<patterns.size();i++)
          {

          System.out.println(patterns.get(i).printPattern());
          }
                  System.out.println("END");
  }

  final public int actionMapId() throws ParseException {
  String id = "";
  Token t;
    jj_consume_token(ACTION_MAP);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(DIGIT);
          id = id + t.toString();
    }
          {if (true) return Integer.parseInt(id);}
    throw new Error("Missing return statement in function");
  }

  final public void generalConditions() throws ParseException {
  Token t;
    jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GENERAL_CONDITIONS);
    jj_consume_token(RIGHT_BRACKET);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_CONTEXT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      condition();
    }
  }

  final public LFPUBSPattern pattern(int actionMapId) throws ParseException {
  LFPUBSPattern     pattern     = new LFPUBSPattern();
  Occurs          onOccurs    = null;
  IfContext   ifContext = null;
  ThenDo      thenDo      = null;
  int             patternId   = 0;
    patternId = patternID();
                  pattern.setId(actionMapId+"_"+patternId);
    onOccurs = event();
                  pattern.setEvent(onOccurs);
    ifContext = condition();
                  pattern.setContext(ifContext);
    thenDo = doAction();
                  pattern.setAction(thenDo);
                  {if (true) return pattern;}
    throw new Error("Missing return statement in function");
  }

  final public int patternID() throws ParseException {
  String id = "";
  Token aux;
    jj_consume_token(ACTION_PATTERN);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      aux = jj_consume_token(DIGIT);
     id = id + aux.toString();
    }
    jj_consume_token(RIGHT_BRACKET);
     System.out.println("ID: "+id);
     {if (true) return Integer.parseInt(id);}
    throw new Error("Missing return statement in function");
  }

  final public Occurs event() throws ParseException {
  Occurs onOccurs = null;
    jj_consume_token(ON_OCCURS);
    jj_consume_token(LEFT_BRACKET);
    onOccurs = primitiveEvent();
    jj_consume_token(FREQUENCY);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(DIGIT);
    }
   {if (true) return onOccurs;}
    throw new Error("Missing return statement in function");
  }

  final public Occurs primitiveEvent() throws ParseException {
  Occurs onOccurs = new Occurs();
    onOccurs = type(onOccurs);
    jj_consume_token(COMMA);
     onOccurs.setTime(timeConstant());
     {if (true) return onOccurs;}
    throw new Error("Missing return statement in function");
  }

  final public Occurs action(Occurs onOccurs) throws ParseException {
  String type;
        onOccurs = type(onOccurs);

          System.out.println("OUT OF TYPE");
    {if (true) return onOccurs;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<Sensor > actionSet() throws ParseException {
        Vector<Sensor > actionSet = new Vector<Sensor>();
        Sensor sensor;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      jj_consume_token(LEFT_BRACKET);
    }
    sensor = onOccursSimpleActions();
                                              actionSet.add(sensor);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDPERSAND:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      actionSet = onOccursUnorderedActions(actionSet);
    }
      {if (true) return actionSet;}
    throw new Error("Missing return statement in function");
  }

  final public Sensor onOccursSimpleActions() throws ParseException {
  Sensor sensor = new Sensor();
    System.out.println("SIMPLE ACTION");
   sensor.setStatus(actionStatus());
    jj_consume_token(COMMA);
                                                 sensor.setId(device());
    {if (true) return sensor;}
    throw new Error("Missing return statement in function");
  }

  final public Sensor simpleActions() throws ParseException {
  Sensor sensor = new Sensor();
    System.out.println("SIMPLE ACTION");
    jj_consume_token(LEFT_BRACKET);
   sensor.setStatus(actionStatus());
    jj_consume_token(COMMA);
                                                 sensor.setId(device());
    {if (true) return sensor;}
    throw new Error("Missing return statement in function");
  }

  final public String device() throws ParseException {
  Token name;
  String auxiliar = "";
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case ALPHABET:
        name = jj_consume_token(ALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case UNDERSCORE:
        name = jj_consume_token(UNDERSCORE);
           auxiliar = auxiliar + name.toString();
        break;
      case CAPSALPHABET:
        name = jj_consume_token(CAPSALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case LEFT_BRACKET:
        name = jj_consume_token(LEFT_BRACKET);
           auxiliar = auxiliar + name.toString();
           auxiliar = auxiliar + openBracket();
        break;
      case RIGHT_BRACKET:
        name = jj_consume_token(RIGHT_BRACKET);
           System.out.println("SALIDA : "+auxiliar);
           {if (true) return auxiliar;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
      case RIGHT_BRACKET:
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String openBracket() throws ParseException {
   Token name;
   String auxiliar = "";
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case ALPHABET:
        name = jj_consume_token(ALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case UNDERSCORE:
        name = jj_consume_token(UNDERSCORE);
           auxiliar = auxiliar + name.toString();
        break;
      case CAPSALPHABET:
        name = jj_consume_token(CAPSALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case LEFT_BRACKET:
        name = jj_consume_token(LEFT_BRACKET);
           auxiliar = auxiliar + name.toString();
           auxiliar = openBracket();
        break;
      case RIGHT_BRACKET:
        name = jj_consume_token(RIGHT_BRACKET);
           auxiliar = auxiliar + name.toString();
           {if (true) return auxiliar;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
      case RIGHT_BRACKET:
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String actionStatus() throws ParseException {
  String status = "";
  Token aux;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      aux = jj_consume_token(ON);
                   status = status + aux.toString();
      break;
    case OFF:
      aux = jj_consume_token(OFF);
                                                                          status = status + aux.toString();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return status;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<Sensor> unorderedActions(Vector<Sensor> sensors) throws ParseException {
  System.out.println("UNORDERED ACTION");
   sensors.add(simpleActions());
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDPERSAND:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_10;
      }
      jj_consume_token(ANDPERSAND);
      jj_consume_token(LEFT_BRACKET);
                                  sensors.add(simpleActions());
    }
          {if (true) return sensors;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<Sensor> onOccursUnorderedActions(Vector<Sensor> sensors) throws ParseException {

    jj_consume_token(ANDPERSAND);
    jj_consume_token(LEFT_BRACKET);
                                 sensors.add(onOccursSimpleActions());
          {if (true) return sensors;}
    throw new Error("Missing return statement in function");
  }

  final public Occurs type(Occurs onOccurs) throws ParseException {
  String result = "";
  Sensor auxSensor;
  Token aux;
  Vector <Sensor> sensors = new Vector<Sensor>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIMPLE:
      aux = jj_consume_token(SIMPLE);
      jj_consume_token(COMMA);
      auxSensor = simpleActions();
    onOccurs.setType(aux.toString());
        sensors.add(auxSensor);
      break;
    case UNORDERED:
      aux = jj_consume_token(UNORDERED);
      jj_consume_token(COMMA);
      jj_consume_token(LEFT_BRACKET);
      sensors = unorderedActions(sensors);
      jj_consume_token(RIGHT_BRACKET);
                                                                                                      result = result + aux.toString();
      break;
    case START:
      aux = jj_consume_token(START);
      jj_consume_token(COMMA);
      jj_consume_token(HYPHEN);
      jj_consume_token(HYPHEN);
                                               result = result + aux.toString();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 //System.out.println("TYPE: "+result);
    onOccurs.setSensors(sensors);
    //System.out.println("LINE: "+input_stream.line+" COLUMN:"+input_stream.column);
    {if (true) return onOccurs;}
    throw new Error("Missing return statement in function");
  }

  final public String timeConstant() throws ParseException {
  String auxiliar = "";
  Token name;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT_BRACKET:
      case DIGIT:
      case ALPHABET:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case RIGHT_BRACKET:
        name = jj_consume_token(RIGHT_BRACKET);
          // auxiliar = auxiliar + name.toString();
          // System.out.println("ENCONTRADO: "+auxiliar);
           {if (true) return auxiliar;}
        break;
      case ALPHABET:
        name = jj_consume_token(ALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return auxiliar;}
    throw new Error("Missing return statement in function");
  }

  final public IfContext condition() throws ParseException {
  IfContext ifContext = new IfContext();
    jj_consume_token(IF_CONTEXT);
    jj_consume_token(LEFT_BRACKET);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_12;
      }
      attribute();
    }
    jj_consume_token(RIGHT_BRACKET);
    {if (true) return ifContext;}
    throw new Error("Missing return statement in function");
  }

  final public void primitiveQuantitativeCondition() throws ParseException {
    quantitativeCondition();
  }

  final public void primitiveQualitativeCondition() throws ParseException {
    qualitativeCondition();
  }

  final public IfContext attribute() throws ParseException {
  IfContext ifContext = new IfContext();
    jj_consume_token(LEFT_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACKET:
      calendar();
      break;
    case UNDERSCORE:
    case DIGIT:
    case ALPHABET:
    case CAPSALPHABET:
      sensor();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
      case 49:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        jj_consume_token(49);
        calendar();
        break;
      case LEFT_BRACKET:
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
        sensor();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(LEFT_BRACKET);
    ifContext = getPriority(ifContext);
    jj_consume_token(RIGHT_BRACKET);
          {if (true) return ifContext;}
    throw new Error("Missing return statement in function");
  }

  final public IfContext getPriority(IfContext ifContext) throws ParseException {
  Token minus = null, priority = null;
    jj_consume_token(PRIORITY);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HYPHEN:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_14;
      }
      minus = jj_consume_token(HYPHEN);
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_15;
      }
      priority = jj_consume_token(DIGIT);
    }
                if(minus != null) {
                        ifContext.setPriority(-1 * Integer.valueOf(priority.toString()));
                } else {
                        ifContext.setPriority(Integer.valueOf(priority.toString()));
                }
                {if (true) return ifContext;}
    throw new Error("Missing return statement in function");
  }

  final public TimeOfDay calendar() throws ParseException {
  TimeOfDay timeOfDay = new TimeOfDay();
    jj_consume_token(LEFT_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACKET:
      timeOfDay();
      break;
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
      dayOfWeek();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_16;
      }
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        timeOfDay();
        break;
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
        dayOfWeek();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(LEFT_BRACKET);
    jj_consume_token(PRIORITY);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_17;
      }
      jj_consume_token(DIGIT);
    }
    jj_consume_token(RIGHT_BRACKET);
                {if (true) return timeOfDay;}
    throw new Error("Missing return statement in function");
  }

  final public TimeOfDay timeOfDay() throws ParseException {
  TimeOfDay timeOfDay = new TimeOfDay();
  String value = "";
    jj_consume_token(LEFT_BRACKET);
    jj_consume_token(51);
    jj_consume_token(LEFT_BRACKET);
    symbol();
    jj_consume_token(COMMA);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
      case DIGIT:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_18;
      }
      value = floatValue();
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(RIGHT_BRACKET);
   timeOfDay.setTimeOfDay(value);
   {if (true) return timeOfDay;}
    throw new Error("Missing return statement in function");
  }

  final public void dayOfWeek() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      break;
    case 53:
      jj_consume_token(53);
      break;
    case 54:
      jj_consume_token(54);
      break;
    case 55:
      jj_consume_token(55);
      break;
    case 56:
      jj_consume_token(56);
      break;
    case 57:
      jj_consume_token(57);
      break;
    case 58:
      jj_consume_token(58);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String sensor() throws ParseException {
  String auxiliar = "";
  Token name;
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case ALPHABET:
        name = jj_consume_token(ALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case UNDERSCORE:
        name = jj_consume_token(UNDERSCORE);
           auxiliar = auxiliar + name.toString();
        break;
      case CAPSALPHABET:
        name = jj_consume_token(CAPSALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case LEFT_BRACKET:
        name = jj_consume_token(LEFT_BRACKET);
           auxiliar = auxiliar + name.toString();
           auxiliar = openBracket();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_19;
      }
    }
          {if (true) return auxiliar;}
    throw new Error("Missing return statement in function");
  }

  final public void quantitativeCondition() throws ParseException {
    jj_consume_token(LEFT_BRACKET);
    symbol();
    jj_consume_token(COMMA);
    quantitativeValue();
    jj_consume_token(RIGHT_BRACKET);
  }

  final public void symbol() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
      break;
    case MORE_THAN:
      jj_consume_token(MORE_THAN);
      break;
    case EQ_LESS_THAN:
      jj_consume_token(EQ_LESS_THAN);
      break;
    case EQ_MORE_THAN:
      jj_consume_token(EQ_MORE_THAN);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String quantitativeValue() throws ParseException {
  String auxiliar = "";
  Token name;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HYPHEN:
        name = jj_consume_token(HYPHEN);
           auxiliar = auxiliar + name.toString();
        break;
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case POINT:
        name = jj_consume_token(POINT);
           auxiliar = auxiliar + name.toString();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
      case HYPHEN:
      case DIGIT:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_20;
      }
    }
          {if (true) return auxiliar;}
    throw new Error("Missing return statement in function");
  }

  final public String floatValue() throws ParseException {
  String auxiliar = "";
  Token name;
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case POINT:
        name = jj_consume_token(POINT);
           auxiliar = auxiliar + name.toString();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
      case DIGIT:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_21;
      }
    }
          {if (true) return auxiliar;}
    throw new Error("Missing return statement in function");
  }

  final public void qualitativeCondition() throws ParseException {
    jj_consume_token(59);
  }

  final public void compositeCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACKET:
      conditionSet();
      break;
    default:
      jj_la1[36] = jj_gen;
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANDPERSAND:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_22;
        }
        jj_consume_token(ANDPERSAND);
        conditionSet();
      }
    }
  }

  final public void conditionSet() throws ParseException {
    attribute();
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      primitiveQualitativeCondition();
      break;
    case LEFT_BRACKET:
      primitiveQuantitativeCondition();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ThenDo doAction() throws ParseException {
  Token t;
  ThenDo thenDo = new ThenDo();
    jj_consume_token(THEN);
    jj_consume_token(DO);
    jj_consume_token(LEFT_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIMPLE:
    case UNORDERED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIMPLE:
        jj_consume_token(SIMPLE);
        break;
      case UNORDERED:
        jj_consume_token(UNORDERED);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case HYPHEN:
      jj_consume_token(HYPHEN);
      jj_consume_token(HYPHEN);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACKET:
    case COMMA:
      actionSet();
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT_BRACKET:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_23;
      }
      jj_consume_token(RIGHT_BRACKET);
    }
    jj_consume_token(COMMA);
    timeConstant();
    then();
                {if (true) return thenDo;}
    throw new Error("Missing return statement in function");
  }

  final public void then() throws ParseException {
    jj_consume_token(WHEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HYPHEN:
      jj_consume_token(HYPHEN);
      jj_consume_token(HYPHEN);
      break;
    case RIGHT_BRACKET:
    case DIGIT:
    case ALPHABET:
    case EQUAL:
      timeConstant();
      jj_consume_token(EQUAL);
      timeConstant();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_24;
        }
        jj_consume_token(PLUS);
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POINT:
          case DIGIT:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_25;
          }
          floatValue();
        }
      }
      jj_consume_token(ALPHABET);
      jj_consume_token(POINT);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public LFPUBSCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x1000000,0x0,0x1000000,0x1000000,0x400,0x400000,0x7800c00,0x7800c00,0x7800c00,0x7800c00,0x0,0x400000,0x0,0x3000800,0x3000800,0x400,0x7800400,0x7800400,0x7800400,0x200000,0x1000000,0x400,0x0,0x400,0x1000000,0x1010000,0x0,0x7800400,0x7800400,0xf0000000,0x1210000,0x1210000,0x1010000,0x1010000,0x400000,0x400,0x400,0x0,0x200000,0x80400,0x800,0x0,0x1010000,0x13200800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x1c,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x7f00000,0x40000,0x7f00000,0x0,0x0,0x7f00000,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x18,0x18,0x20,0x0,0x2,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LFPUBSCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LFPUBSCompiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LFPUBSCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LFPUBSCompiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LFPUBSCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LFPUBSCompiler(LFPUBSCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LFPUBSCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
